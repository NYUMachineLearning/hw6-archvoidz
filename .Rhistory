knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.package("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tidyverse")
install.packages("caret")
library(tidyverse)
library(tidyverse)
library(mlbench)
install.packages("mlbench")
library(tidyverse)
library(mlbench)
library(caret)
library(caret)
library(pROC)
install.packages("pROC")
library(pROC)
data("Titanic")
df = Titanic
View(df)
df = as.data.frame(Titanic)
View(df)
data("iris")
df = iris
numbers = sample(c(1:nrow(iris)), 0.7*nrow(iris))
train = iris[numbers,]
test = iris[-numbers,]
control = trainControl(method = "repeatedcv", repeats = 5, classProbs = T, savePredictions = T)
svm_linear = train(Species ~ ., data = train, method = "svmLinear", tuneLength = 10, trControl = control)
install.packages("e1071")
data("iris")
df = iris
numbers = sample(c(1:nrow(iris)), 0.7*nrow(iris))
train = iris[numbers,]
test = iris[-numbers,]
control = trainControl(method = "repeatedcv", repeats = 5, classProbs = T, savePredictions = T)
svm_linear = train(Species ~ ., data = train, method = "svmLinear", tuneLength = 10, trControl = control)
df$Species["setosa"]
df$Species["setosa"]
df$Species[df$Species == "setosa"]
df$Species[df$Species == "setosa",]
df[df$Species == "setosa",]
df[df$Species == "versicolor"] = "not setosa"
df$Species[df$Species == "versicolor"] = "not setosa"
df$Species[df$Species == "verginica"] = "not setosa"
df$Species = as.character(df$Species)
df$Species[df$Species == "versicolor"] = "not setosa"
df$Species[df$Species == "verginica"] = "not setosa"
View(df)
df = iris
df$Species = as.character(df$Species)
df$Species[df$Species == "versicolor"] = "not setosa"
df$Species[df$Species == "virginica"] = "not setosa"
df$Species = as.factor(df$Species)
numbers = sample(c(1:nrow(iris)), 0.7*nrow(iris))
train = iris[numbers,]
test = iris[-numbers,]
#Setting up CV
control = trainControl(method = "repeatedcv", repeats = 5, classProbs = T, savePredictions = T)
#SVM Linear model
svm_linear = train(Species ~ ., data = train, method = "svmLinear", tuneLength = 10, trControl = control)
#ROC
roc(predictor = svm_linear$pred$setosa, response = svm_linear$pred$obs)$auc
View(train)
df$Species = as.factor(df$Species)
numbers = sample(c(1:nrow(df)), 0.7*nrow(df))
train = df[numbers,]
test = df[-numbers,]
#Setting up CV
control = trainControl(method = "repeatedcv", repeats = 5, classProbs = T, savePredictions = T)
#SVM Linear model
svm_linear = train(Species ~ ., data = train, method = "svmLinear", tuneLength = 10, trControl = control)
df = iris
df$Species = as.character(df$Species)
df$Species[df$Species == "versicolor"] = "not_setosa"
df$Species[df$Species == "virginica"] = "not_setosa"
df$Species = as.factor(df$Species)
numbers = sample(c(1:nrow(df)), 0.7*nrow(df))
train = df[numbers,]
test = df[-numbers,]
#Setting up CV
control = trainControl(method = "repeatedcv", repeats = 5, classProbs = T, savePredictions = T)
#SVM Linear model
svm_linear = train(Species ~ ., data = train, method = "svmLinear", tuneLength = 10, trControl = control)
#ROC
roc(predictor = svm_linear$pred$setosa, response = svm_linear$pred$obs)$auc
#ROC
roc(predictor = svm_linear$pred$not_setosa, response = svm_linear$pred$obs)$auc
#ROC
roc(predictor = svm_linear$pred$setosa, response = svm_linear$pred$obs)$auc
plot(x = roc(predictor = svm_linear$pred$setosa, response = svm_linear$pred$obs)$specificities, y = roc(predictor = svm_linear$pred$setosa, response = svm_linear$pred$obs)$sensitivities, col= "blue", xlim = c(1, 0), type ="l", ylab = "Sensitivity", xlab = "Specificity")
confusionMatrix(svm_linear, reference = test_classification$Class)
confusionMatrix(svm_linear)
#Test Set
svm_linear_test = predict(svm_linear, test)
confusionMatrix(svm_linear_test, test$Species)
#SVM Radial Model
svm_radial = train(Species ~ ., data = train, method = "svmRadial", tuneLength = 10, trControl = control)
#ROC
roc(predictor = svm_radial$pred$setosa, response = svm_radial$pred$obs)$auc
confusionMatrix(svm_linear)
confusionMatrix(svm_radial)
#Test Set
svm_linear_test = predict(svm_radial, test)
#Test Set
svm_radial_test = predict(svm_radial, test)
confusionMatrix(svm_radial_test, test$Species)
install.packages("randomForest")
library(randomForest)
rf = randomForest(Species ~., data = df)
varImpPlot(rf)
#SVM Linear model
svm_linear = train(Species ~ Petal.Width + Petal.Length ., data = train, method = "svmLinear", tuneLength = 10, trControl = control)
#SVM Linear model
svm_linear = train(Species ~ "Petal.Width" + "Petal.Length" ., data = train, method = "svmLinear", tuneLength = 10, trControl = control)
#SVM Linear model
svm_linear = train(Species ~ Petal.Width + Petal.Length, data = train, method = "svmLinear", tuneLength = 10, trControl = control)
#ROC
roc(predictor = svm_linear$pred$setosa, response = svm_linear$pred$obs)$auc
#SVM Linear model
svm_radial = train(Species ~ Petal.Width + Petal.Length, data = train, method = "svmRadial", tuneLength = 10, trControl = control)
#ROC
roc(predictor = svm_radial$pred$setosa, response = svm_radial$pred$obs)$auc
plot(x = roc(predictor = svm_radial$pred$setosa, response = svm_radial$pred$obs)$specificities, y = roc(predictor = svm_radial$pred$setosa, response = svm_radial$pred$obs)$sensitivities, col= "blue", xlim = c(1, 0), type ="l", ylab = "Sensitivity", xlab = "Specificity")
confusionMatrix(svm_linear)
svm_radial_test = predict(svm_radial, test)
confusionMatrix(svm_radial_test, test$Species)
